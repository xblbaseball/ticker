/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CurrentSeason = number;
export type Team = string;
export type Wins = number;
export type Losses = number;
export type Remaining = number;
export type Rank = number;
export type EgoStarting = number;
export type EgoCurrent = number;
export type Gb = number;
export type WinPct = number;
export type WinPctVs500 = number;
export type SweepsW = number;
export type Splits = number;
export type SweepsL = number;
export type Sos = number;
export type Elo = number;
export type Team1 = string;
export type Player = string;
export type Rs = number;
export type Rs9 = number;
export type Ba = number;
export type Ab = number;
export type Ab9 = number;
export type H = number;
export type H9 = number;
export type Hr = number;
export type Hr9 = number;
export type Abhr = number;
export type So = number;
export type So9 = number;
export type Bb = number;
export type Bb9 = number;
export type Obp = number;
export type Rc = number;
export type Babip = number;
export type Ra = number;
export type Ra9 = number;
export type Oppba = number;
export type Oppab9 = number;
export type Opph = number;
export type Opph9 = number;
export type Opphr = number;
export type Opphr9 = number;
export type Oppabhr = number;
export type Oppk = number;
export type Oppk9 = number;
export type Oppbb = number;
export type Oppbb9 = number;
export type Whip = number;
export type Lob = number;
export type E = number;
export type Fip = number;
export type Rd = number;
export type Rd9 = number;
export type InningsPlayed = number;
export type InningsGame = number;
export type Wins1 = number;
export type Losses1 = number;
export type WinsByRunRule = number;
export type LossesByRunRule = number;
export type Seasons = number[];
export type Season = number;
export type League = string;
export type HomeTeam = string;
export type AwayTeam = string;
export type HomePlayer = string;
export type AwayPlayer = string;
export type HomeScore = number;
export type AwayScore = number;
export type RunRule = boolean;
export type Winner = string;
export type Innings = number;
export type AwayAb = number;
export type AwayR = number;
export type AwayHits = number;
export type AwayHr = number;
export type AwayRbi = number;
export type AwayBb = number;
export type AwaySo = number;
export type AwayE = number;
export type HomeAb = number;
export type HomeR = number;
export type HomeHits = number;
export type HomeHr = number;
export type HomeRbi = number;
export type HomeBb = number;
export type HomeSo = number;
export type HomeE = number;
export type Week = number;
export type SeasonGameResults = SeasonGameResults1[];
export type Team2 = string;
export type Team3 = string;
export type Wins2 = number;
export type Losses2 = number;
export type Remaining1 = number;
export type Round = string;
export type Opponent = string;
export type Season1 = number;
export type League1 = string;
export type HomeTeam1 = string;
export type AwayTeam1 = string;
export type HomePlayer1 = string;
export type AwayPlayer1 = string;
export type HomeScore1 = number;
export type AwayScore1 = number;
export type RunRule1 = boolean;
export type Winner1 = string;
export type Innings1 = number;
export type AwayAb1 = number;
export type AwayR1 = number;
export type AwayHits1 = number;
export type AwayHr1 = number;
export type AwayRbi1 = number;
export type AwayBb1 = number;
export type AwaySo1 = number;
export type AwayE1 = number;
export type HomeAb1 = number;
export type HomeR1 = number;
export type HomeHits1 = number;
export type HomeHr1 = number;
export type HomeRbi1 = number;
export type HomeBb1 = number;
export type HomeSo1 = number;
export type HomeE1 = number;
export type Round1 = string;
export type PlayoffsGameResults = PlayoffsGameResults1[];

/**
 * every high-level stat you could want to know about a season
 */
export interface SeasonStats {
  current_season: CurrentSeason;
  season_team_records: SeasonTeamRecords;
  season_team_stats: SeasonTeamStats;
  season_game_results: SeasonGameResults;
  playoffs_team_records: PlayoffsTeamRecords;
  playoffs_team_stats: PlayoffsTeamStats;
  playoffs_game_results: PlayoffsGameResults;
  [k: string]: unknown;
}
export interface SeasonTeamRecords {
  [k: string]: SeasonTeamRecord;
}
/**
 * How a team stacks up in a given season
 */
export interface SeasonTeamRecord {
  team: Team;
  wins: Wins;
  losses: Losses;
  remaining: Remaining;
  rank: Rank;
  ego_starting: EgoStarting;
  ego_current: EgoCurrent;
  gb: Gb;
  win_pct: WinPct;
  win_pct_vs_500: WinPctVs500;
  sweeps_w: SweepsW;
  splits: Splits;
  sweeps_l: SweepsL;
  sos: Sos;
  elo: Elo;
  [k: string]: unknown;
}
export interface SeasonTeamStats {
  [k: string]: TeamStats;
}
/**
 * Performance stats for a team for a given season/playoffs
 */
export interface TeamStats {
  team: Team1;
  player: Player;
  rs: Rs;
  rs9: Rs9;
  ba: Ba;
  ab: Ab;
  ab9: Ab9;
  h: H;
  h9: H9;
  hr: Hr;
  hr9: Hr9;
  abhr: Abhr;
  so: So;
  so9: So9;
  bb: Bb;
  bb9: Bb9;
  obp: Obp;
  rc: Rc;
  babip: Babip;
  ra: Ra;
  ra9: Ra9;
  oppba: Oppba;
  oppab9: Oppab9;
  opph: Opph;
  opph9: Opph9;
  opphr: Opphr;
  opphr9: Opphr9;
  oppabhr: Oppabhr;
  oppk: Oppk;
  oppk9: Oppk9;
  oppbb: Oppbb;
  oppbb9: Oppbb9;
  whip: Whip;
  lob: Lob;
  e: E;
  fip: Fip;
  rd: Rd;
  rd9: Rd9;
  innings_played: InningsPlayed;
  innings_game: InningsGame;
  wins: Wins1;
  losses: Losses1;
  wins_by_run_rule: WinsByRunRule;
  losses_by_run_rule: LossesByRunRule;
  seasons: Seasons;
  [k: string]: unknown;
}
/**
 * what happened in a regular season game
 */
export interface SeasonGameResults1 {
  season: Season;
  league: League;
  home_team: HomeTeam;
  away_team: AwayTeam;
  home_player: HomePlayer;
  away_player: AwayPlayer;
  home_score: HomeScore;
  away_score: AwayScore;
  run_rule: RunRule;
  winner: Winner;
  innings: Innings;
  away_ab: AwayAb;
  away_r: AwayR;
  away_hits: AwayHits;
  away_hr: AwayHr;
  away_rbi: AwayRbi;
  away_bb: AwayBb;
  away_so: AwaySo;
  away_e: AwayE;
  home_ab: HomeAb;
  home_r: HomeR;
  home_hits: HomeHits;
  home_hr: HomeHr;
  home_rbi: HomeRbi;
  home_bb: HomeBb;
  home_so: HomeSo;
  home_e: HomeE;
  week: Week;
  [k: string]: unknown;
}
export interface PlayoffsTeamRecords {
  [k: string]: PlayoffsTeamRecord;
}
/**
 * how a team did in each round of the playoffs
 */
export interface PlayoffsTeamRecord {
  team: Team2;
  rounds: Rounds;
  [k: string]: unknown;
}
export interface Rounds {
  [k: string]: PlayoffsRound;
}
/**
 * who a team played in a round
 */
export interface PlayoffsRound {
  team: Team3;
  wins: Wins2;
  losses: Losses2;
  remaining: Remaining1;
  round: Round;
  opponent: Opponent;
  [k: string]: unknown;
}
export interface PlayoffsTeamStats {
  [k: string]: TeamStats;
}
/**
 * what happened in a playoff game
 */
export interface PlayoffsGameResults1 {
  season: Season1;
  league: League1;
  home_team: HomeTeam1;
  away_team: AwayTeam1;
  home_player: HomePlayer1;
  away_player: AwayPlayer1;
  home_score: HomeScore1;
  away_score: AwayScore1;
  run_rule: RunRule1;
  winner: Winner1;
  innings: Innings1;
  away_ab: AwayAb1;
  away_r: AwayR1;
  away_hits: AwayHits1;
  away_hr: AwayHr1;
  away_rbi: AwayRbi1;
  away_bb: AwayBb1;
  away_so: AwaySo1;
  away_e: AwayE1;
  home_ab: HomeAb1;
  home_r: HomeR1;
  home_hits: HomeHits1;
  home_hr: HomeHr1;
  home_rbi: HomeRbi1;
  home_bb: HomeBb1;
  home_so: HomeSo1;
  home_e: HomeE1;
  round: Round1;
  [k: string]: unknown;
}
